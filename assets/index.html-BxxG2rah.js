import{_ as a,c as i,a as n,o as e}from"./app-CQfiJkfp.js";const l={};function d(p,s){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><ul><li>业务1: 有多个客户端不停在获取任务表中的任务用于消费。查询时通过<code>select fro update</code>语句，查询<code>status</code>为<code>NEW</code>的优先级最高的一条任务后，将<code>status</code>改为<code>REDY</code></li><li>业务2: 有一个存储过程每天都会删除优先级为前10以后的任务。</li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>某天存储过程报错：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SQLSTATE=40001MESSAGE:Deadlock found when trying to get lock; try restarting transaction</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>业务1获取任务时，恰好遇到业务2的存储过程执行，准备删除相同一行数据的任务从而导致死锁。</p><h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h2><h3 id="名词定义" tabindex="-1"><a class="header-anchor" href="#名词定义"><span>名词定义</span></a></h3><p>死锁数据：当两个或多个事务在死锁时抢占的行数据。 主键锁：在死锁数据对应的主键索引上添加的锁。 二级索引锁：在死锁数据对应的二级索引上添加的锁。</p><h3 id="相关知识介绍" tabindex="-1"><a class="header-anchor" href="#相关知识介绍"><span>相关知识介绍</span></a></h3><ul><li>MySQL InnoDB 的行级锁最终都是加在主键索引上。</li><li>如果<code>select for update</code>根据二级索引查询，会先在二级索引上加锁，然后通过二级索引找到行数据，最终再在行数据上的主键索引上加锁。</li><li>delete语句删除行数据时，还要删除对应行的所有索引。因此如果表存在二级索引，delete执行时也会尝试获取这行数据的二级索引锁。</li></ul><h3 id="死锁事务分析" tabindex="-1"><a class="header-anchor" href="#死锁事务分析"><span>死锁事务分析</span></a></h3><h4 id="事务1" tabindex="-1"><a class="header-anchor" href="#事务1"><span>事务1</span></a></h4><ul><li>相关业务：云检查资源机器通过任务框架，调用<code>get_task_by_preemptive</code>存储过程抢占式获取资源任务。</li><li>加锁语句：</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> info_id </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> @infoId </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> task_info</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TASK_NAME </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test_task_name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AND</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STATUS</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">NEW</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ORDER BY</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PRIORITY LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FOR</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> UPDATE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加锁过程： <ul><li><p>加锁语句根据<code>TASK_NAME</code> 、<code>STATUS</code> 两个条件查询，因此走的是<code>TASK_NAME_STATUS_EXEC_TIME</code> 的索引。查询时会在<code>TASK_NAME_STATUS_EXEC_TIME</code>二级索引上给所有匹配的多行数据加锁。</p></li><li><p>数据库根据二级索引定位到行数据，然后在这些行数据的主键索引上加锁</p></li></ul></li><li>锁定数据数目：多行</li></ul><h4 id="事务2" tabindex="-1"><a class="header-anchor" href="#事务2"><span>事务2</span></a></h4><ul><li>相关业务：每天早上<code>auto_add_task</code>存储过程执行时，会删除优先级为前10以后的NEW状态资源任务，在添加新的资源任务。</li><li>加锁语句：</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DELETE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> task_info </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> task_name </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> temp_task_name </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> info_id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> temp_info_id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加锁过程： <ul><li>这个sql根据<code>TASK_NAME</code> 、<code>INFO_ID</code>这两个字段条件查询进行删除，因此走的是主键索引。会在主键索引上为符合条件的一行数据添加锁。 <ul><li>在删除数据的同时会删除该行数据所对应的索引，这里会删除<code>TASK_NAME_STATUS_EXEC_TIME</code>二级索引。因此需要获取二级索引上的锁。</li></ul></li></ul></li><li>锁定数据数目：单行</li></ul><h3 id="详细流程分析" tabindex="-1"><a class="header-anchor" href="#详细流程分析"><span>详细流程分析</span></a></h3><ul><li>云检查资源任务程序获取资源任务时，通过<code>get_task_by_preemptive</code>存储过程进入事务1。</li><li>事务1通过<code>select for update</code>语句批量为<code>TASK_NAME=test_task_name</code>且<code>STATUS=NEW</code>的所有数据上添加<code>TASK_NAME_STATUS_EXEC_TIME</code> 二级索引锁。</li><li>此时<code>auto_add_task</code>存储过程执行为stl云检查添加资源任务。存储过程执行时会通过delete语句一条一条删除优先级为前10以后的资源任务。</li><li>执行delete语句时会进入事务2，为<code>TASK_NAME=test_task_name</code>且<code>INFO_ID=109213075</code>这一行数据添加主键锁。</li><li>事务1添加完二级索引上的锁之后，尝试获取这些数据的主键锁，而其中一行<code>INFO_ID=109213075</code>数据的主键锁被事务2获取了，因此事务1会等待事务2放锁</li><li>事务2获取到了主键锁之后，尝试更新二级索引上的锁。此时会发现二级索引已经被事务1占用。</li><li>此时两个事务相互等待对方所持有的锁，从而导致死锁： <ul><li>事务1持有死锁数据的二级索引锁，等待事务2的主键锁释放</li><li>事务2持有死锁数据的主键锁，等待事务1的二级索引锁释放</li></ul></li><li>MySQL自动检测到死锁，于是选择回滚事务2来释放主键锁，使得事务1可以获取主键锁，以结束死锁状态。由于回滚了事务2的delete语句，因此<code>INFO_ID=109213075</code>这行数据并没有被删除。</li><li>由于游标中的delete语句报错死锁，异常捕获会将变量done改为<code>TRUE</code>，从而跳出循环关闭游标。因此死锁数据之后的任务数据都不会被删除。</li></ul><h3 id="死锁日志" tabindex="-1"><a class="header-anchor" href="#死锁日志"><span>死锁日志</span></a></h3><p>相关的死锁日志证明如下</p><ul><li>使用<code>SHOW ENGINE INNODB STATUS</code>语句，可以看到最近的死锁日志。</li><li>提取部分的死锁日志信息如下：</li></ul><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>------------------------</span></span>
<span class="line"><span>LATEST DETECTED DEADLOCK</span></span>
<span class="line"><span>------------------------</span></span>
<span class="line"><span>2025-07-15 13:39:27 0x1f98</span></span>
<span class="line"><span>*** (1) TRANSACTION:</span></span>
<span class="line"><span>TRANSACTION 7013870934, ACTIVE 0 sec fetching rows</span></span>
<span class="line"><span>mysql tables in use 1, locked 1</span></span>
<span class="line"><span>LOCK WAIT 6 lock struct(s), heap size 1136, 194 row lock(s)</span></span>
<span class="line"><span>MySQL thread id 55089911, OS thread handle 57448, query id 610596034 192.168.7.75 user1 executing</span></span>
<span class="line"><span>SELECT info_id INTO @infoId FROM task_info WHERE TASK_NAME = &#39;test_task_name&#39; AND STATUS = &#39;NEW&#39; ORDER BY PRIORITY  LIMIT 1 FOR UPDATE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*** (1) HOLDS THE LOCK(S):</span></span>
<span class="line"><span>RECORD LOCKS space id 215 page no 837969 n bits 368 index TASK_NAME_STATUS_EXEC_TIME of table \`task_info\` trx id 7013870934 lock_mode X</span></span>
<span class="line"><span>Record lock, heap no 3 PHYSICAL RECORD: n_fields 4; compact format; info bits 32</span></span>
<span class="line"><span> 0: len 28; hex xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; asc test_task_name;;</span></span>
<span class="line"><span> 1: len 3; hex 4e4557; asc NEW;;</span></span>
<span class="line"><span> 2: len 5; hex xxxxxxxxxx; asc     ;;</span></span>
<span class="line"><span> 3: len 9; hex xxxxxxxxxxxxxxxxx; asc 109205256;;</span></span>
<span class="line"><span>// ...省略</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span></span>
<span class="line"><span>RECORD LOCKS space id 215 page no 811369 n bits 192 index PRIMARY of table \`task_info\` trx id 7013870934 lock_mode X locks rec but not gap waiting</span></span>
<span class="line"><span>Record lock, heap no 114 PHYSICAL RECORD: n_fields 29; compact format; info bits 32</span></span>
<span class="line"><span> 0: len 28; hex xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; asc test_task_name;;</span></span>
<span class="line"><span> 1: len 9; hex xxxxxxxxxxxxxxxxxx; asc 109213075;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span></span>
<span class="line"><span>RECORD LOCKS space id 215 page no 837969 n bits 368 index TASK_NAME_STATUS_EXEC_TIME of table \`task_info\` trx id 7013870936 lock_mode X locks rec but not gap waiting</span></span>
<span class="line"><span>Record lock, heap no 114 PHYSICAL RECORD: n_fields 4; compact format; info bits 0</span></span>
<span class="line"><span> 0: len 28; hex 636c6f7564566965775f72756e5f73746c5765625f757365725f3130; asc test_task_name;;</span></span>
<span class="line"><span> 1: len 3; hex 4e4557; asc NEW;;</span></span>
<span class="line"><span> 2: len 5; hex 99b71cdc57; asc     W;;</span></span>
<span class="line"><span> 3: len 9; hex 313039323133303735; asc 109213075;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*** WE ROLL BACK TRANSACTION (2)</span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span>TRANSACTIONS</span></span>
<span class="line"><span>------------</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,27)])])}const c=a(l,[["render",d]]),r=JSON.parse('{"path":"/article/7v7kg82u/","title":"mysql死锁分析","lang":"zh-CN","frontmatter":{"title":"mysql死锁分析","createTime":"2025/09/01 12:23:01","tags":["mysql"],"permalink":"/article/7v7kg82u/","description":"背景 业务1: 有多个客户端不停在获取任务表中的任务用于消费。查询时通过select fro update语句，查询status为NEW的优先级最高的一条任务后，将status改为REDY 业务2: 有一个存储过程每天都会删除优先级为前10以后的任务。 问题 某天存储过程报错： 结论 业务1获取任务时，恰好遇到业务2的存储过程执行，准备删除相同一行数据...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql死锁分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-02T01:21:05.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/blog/article/7v7kg82u/"}],["meta",{"property":"og:site_name","content":"Maiiiiiid"}],["meta",{"property":"og:title","content":"mysql死锁分析"}],["meta",{"property":"og:description","content":"背景 业务1: 有多个客户端不停在获取任务表中的任务用于消费。查询时通过select fro update语句，查询status为NEW的优先级最高的一条任务后，将status改为REDY 业务2: 有一个存储过程每天都会删除优先级为前10以后的任务。 问题 某天存储过程报错： 结论 业务1获取任务时，恰好遇到业务2的存储过程执行，准备删除相同一行数据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-02T01:21:05.000Z"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:modified_time","content":"2025-09-02T01:21:05.000Z"}]]},"readingTime":{"minutes":4.88,"words":1463},"git":{"createdTime":1756720237000,"updatedTime":1756776065000,"contributors":[{"name":"Maid","username":"Maid","email":"zhp92@outlook.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Maid?v=4","url":"https://github.com/Maid"}]},"autoDesc":true,"filePathRelative":"posts/mysql-deadlock.md","headers":[],"categoryList":[{"id":"18958e","sort":10000,"name":"posts"}]}');export{c as comp,r as data};
