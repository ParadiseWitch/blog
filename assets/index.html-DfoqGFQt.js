import{_ as s,c as a,a as e,o as t}from"./app-CQfiJkfp.js";const n={};function l(h,i){return t(),a("div",null,[...i[0]||(i[0]=[e(`<blockquote><p>可以人为MVCC是行级锁的一个变种，但是他在很多情况下避免了加锁操作，因此开销更低。 虽然MVCC没有一个同一标准，大多实现机制不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p></blockquote><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><ul><li>乐观并发控制</li><li>悲观并发控制</li></ul><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><h2 id="基本实现" tabindex="-1"><a class="header-anchor" href="#基本实现"><span>基本实现</span></a></h2><p>MVCC基本上是靠保存数据的在某个时间点的快照来实现的。</p><ul><li>不管执行多长时间，每个事务看到数据都是一致的</li><li>根据事务开始时间的不同，每个事务对同一张表，同一时刻看到的事务可能是不一样的。</li></ul><h2 id="innodb的mvcc实现" tabindex="-1"><a class="header-anchor" href="#innodb的mvcc实现"><span>InnoDB的MVCC实现</span></a></h2><p>以InnoDB为例，它的MVCC是通过在每行后面保存两个隐藏的列来实现的：</p><ul><li>保存行创建时间</li><li>保存行过期时间（或删除时间） 当然存储的不是一个实际的时间值，而是一个系统版本号。没开始一个新的事务，系统版本号都会自动递增。 事务开始时间的版本号会作为事务的版本号，用来和查询到的每行记录的版本号比较。</li></ul><p>在 事务#READ COMMITTED (提交读) 下，MVCC具体如下：</p><p><strong>SELECT</strong>： InnoDB会根据一下两个条件检查每行记录：</p><ol><li>InnoDB只查找版本遭遇当前事务版本的数据行，这样可以确保事务读取的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的</li><li>行的删除版本要么未定义，要么大于当前事务版本号。这样可以确保事务读取到的行，在事务开始之前未被删除。</li></ol><p><strong>INSERT</strong>: InnoDB为新插入的每一行保存当前的系统版本号作为行版本号</p><p><strong>DELETE</strong>： InnoDB为删除的一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。</p><p><strong>UPDATE</strong>： InnoDB为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识</p><p>这样，就使得大多数读操作可以不用加锁。</p><p>MVCC只在 事务#READ COMMITTED (提交读) 和 事务#REPEATABLE READ (可重复读) 两个隔离级别下工作。因为：</p><ul><li>事务#READ UNCOMMITTED (未提交读) 总是读取最新的数据行，而不是符合当前事务版本的数据行</li><li>事务#SERIALIZABLE (可串行化) 会对所有读取的行都加锁</li></ul><h3 id="vacuum-postgresql-mvcc的实现" tabindex="-1"><a class="header-anchor" href="#vacuum-postgresql-mvcc的实现"><span>VACUUM：PostgreSQL MVCC的实现</span></a></h3><hr><h2 id="补充概念" tabindex="-1"><a class="header-anchor" href="#补充概念"><span>补充概念</span></a></h2><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb"><span>InnoDB</span></a></h3><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h2><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>MySQL将数据存储在文件中，这种文件的组织方式被称为存储引擎。</p><h2 id="常用存储引擎" tabindex="-1"><a class="header-anchor" href="#常用存储引擎"><span>常用存储引擎</span></a></h2><h2 id="innodb-1" tabindex="-1"><a class="header-anchor" href="#innodb-1"><span>InnoDB</span></a></h2><blockquote><p>[!Tip] InnoDB是MySQL默认的事务型引擎</p></blockquote><ul><li>被设计用来处理大量的短期事务</li><li>性能和自动崩溃恢复特性，使得在非事务型存储的需求中也很流行</li><li>除非需要某些InnoDB不具备的特性，否则InnoDB是默认推荐</li><li>数据存储在表空间中，表空间由InnoDB管理的一个黑盒子，由一系列的数据文件组成</li><li>采用MVCC来支持高并发，并且实现了四个标准的隔离级别。其默认级别是 事务#REPEATABLE READ (可重复读) ，并且通过间隙锁(next-key locking)策略防止幻读的出现。间隙锁使得InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。</li><li>InnoDB表是基于聚簇索引建立的。</li><li>支持热备份</li></ul><h2 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam"><span>MyISAM</span></a></h2><blockquote><p>[!Tip] 在MySQL5.1即之前的版本中，MyISAM是默认的存储引擎</p></blockquote><ul><li>不支持事务和行级锁，而且崩溃后无法安全恢复</li><li>对于只读的数据，或者表比较小、可以忍受修复操作，则依然可以使用MyISAM</li><li>将表存储在两个文件中：数据文件和索引文件，分别以.MYD和.MYI为扩展名</li><li>特点： <ul><li>加锁和并发：对整张表加锁，而不是针对行</li><li>修复：可以手动或者自动修复，但是可能会导致数据丢失</li><li>索引特性：支持全文索引</li><li>延迟更新索引键：</li></ul></li><li>压缩表：</li><li>性能：</li></ul><h2 id="其他引擎" tabindex="-1"><a class="header-anchor" href="#其他引擎"><span>其他引擎</span></a></h2><h3 id="archive引擎" tabindex="-1"><a class="header-anchor" href="#archive引擎"><span>Archive引擎</span></a></h3><ul><li>只支持INSERT和SELECT操作</li><li>只允许自增ID的列上加索引</li></ul><h3 id="blackhole引擎" tabindex="-1"><a class="header-anchor" href="#blackhole引擎"><span>Blackhole引擎</span></a></h3><ul><li>没有实现任何存储机制，会丢弃所有插入的数据，不做任何保存</li></ul><h3 id="csv引擎" tabindex="-1"><a class="header-anchor" href="#csv引擎"><span>CSV引擎</span></a></h3><ul><li>可以将CSV文件作为MySQL的表来处理，但这种表不支持索引</li><li>可以在数据库运行时，将.csv文件拷贝到数据库目录下，就能在MySQL中打开使用。同样，如果将数据写入到一个CSV引擎表，其他的外部程序也能立即从该CSV文件中读取数据。</li><li>可以作为一种数据交换的机制</li></ul><h3 id="memory引擎" tabindex="-1"><a class="header-anchor" href="#memory引擎"><span>Memory引擎</span></a></h3><ul><li>将数据存储在内存中</li><li>服务重启会导致数据丢失，但是表结构会继续存在</li><li>表大小受max_heap_table_size限制</li><li>支持哈希索引</li><li>只支持表级锁</li><li>要求所有字段都是固定长度</li><li>不支持TEXT和BLOB</li><li>存储变长字段(varchar)时，是按照定长字段(char)的方式存储的，会浪费内存</li></ul><h2 id="选择合适的引擎" tabindex="-1"><a class="header-anchor" href="#选择合适的引擎"><span>选择合适的引擎</span></a></h2><ul><li>事务</li><li>备份</li><li>崩溃恢复</li><li>特有的特性</li></ul><h2 id="引擎对比" tabindex="-1"><a class="header-anchor" href="#引擎对比"><span>引擎对比</span></a></h2><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>事务</td><td>×</td><td>√</td><td>×</td></tr><tr><td>MVCC</td><td>×</td><td>√</td><td>×</td></tr><tr><td>锁</td><td>表锁</td><td>行锁</td><td>表锁</td></tr><tr><td>全文索引</td><td>√</td><td>√</td><td>×</td></tr><tr><td>哈希索引</td><td>×</td><td>×</td><td>√</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td></tr><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td></tr><tr><td>支持外键</td><td>×</td><td>√</td><td>×</td></tr><tr><td>崩溃恢复</td><td>×</td><td>√</td><td>×</td></tr><tr><td>备份</td><td>冷备份</td><td>热备份</td><td>×</td></tr><tr><td>数据压缩</td><td>√</td><td>×</td><td>×</td></tr><tr><td>索引压缩</td><td>√</td><td>×</td><td>×</td></tr><tr><td>地理空间索引支持</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><h2 id="转换表的引擎" tabindex="-1"><a class="header-anchor" href="#转换表的引擎"><span>转换表的引擎</span></a></h2><h2 id="alter-table" tabindex="-1"><a class="header-anchor" href="#alter-table"><span>ALTER TABLE</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mytable ENGINE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InnoDB;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>耗时操作，MySQL会按行将数据从原表复制到一张新的表中，期间会消耗系统所有的I/O能力，同时原表上会加上读锁。</p><h2 id="导入和导出" tabindex="-1"><a class="header-anchor" href="#导入和导出"><span>导入和导出</span></a></h2><p>使用mysqldump工具将数据导出，然后修改文件中 <code>CREATE TABLE</code> 语句的存储引擎选项，注意同时修改表名，因为同一个数据库不能存在同名的表，即使他们引擎不同。</p><h2 id="create-select" tabindex="-1"><a class="header-anchor" href="#create-select"><span>CREATE ... SELECT</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> innodb_table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIKE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> myisam_table;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ALTER</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> innodb_table ENGINE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InnoDB;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> innodb_table </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> myisam_table;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h3><h2 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h2><ul><li>原子性(atomicity)：一个事务必须呗视为一个不可分割的最小工作单元。整个事务要么所有操作全部提交成功，要么全部失败回滚。对于一个事务来说，不可能只执行其中一部分操作。</li><li>一致性(consistency)：数据库总是从一个一致性状态切换到另一个一致性状态。比如你的银行卡表的余额字段和账单表的花费字段应该是对的上的。</li><li>隔离性(isolation)：一个事务所做的修改在最终提交之前，对其他事务不可见。事务#事务的隔离级别</li><li>持久性(durability)：一旦事务提交，所做的修改就会从内存永久保存到数据库中。</li></ul><h2 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别"><span>事务的隔离级别</span></a></h2><h2 id="read-uncommitted-未提交读" tabindex="-1"><a class="header-anchor" href="#read-uncommitted-未提交读"><span>READ UNCOMMITTED (未提交读)</span></a></h2><p>事务的修改，即使未提交，也是可以被其他事务可见的。</p><p>存在的问题：脏读</p><h2 id="read-committed-提交读" tabindex="-1"><a class="header-anchor" href="#read-committed-提交读"><span>READ COMMITTED (提交读)</span></a></h2><p>一个事务从开始到结束提交之前，所做的任何修改都是不被其他事务可见的。</p><p>解决的问题：脏读 存在的问题：不可重复读</p><h2 id="repeatable-read-可重复读" tabindex="-1"><a class="header-anchor" href="#repeatable-read-可重复读"><span>REPEATABLE READ (可重复读)</span></a></h2><blockquote><p>[!Tip] REPEATABLE READ (可重复读) 是 mysql 默认的事务隔离级别</p></blockquote><p>保证在同一个事务中多次读取同样的记录的结果是一致的。</p><p>解决的问题：不可重复读 存在的问题：幻读</p><h2 id="serializable-可串行化" tabindex="-1"><a class="header-anchor" href="#serializable-可串行化"><span>SERIALIZABLE (可串行化)</span></a></h2><p>此隔离级别会在每一行数据都加锁。保证事务串行执行</p><p>解决的问题：幻读 存在的问题：可能导致大量的超时和锁占用</p><h2 id="各种隔离级别存在的问题" tabindex="-1"><a class="header-anchor" href="#各种隔离级别存在的问题"><span>各种隔离级别存在的问题</span></a></h2><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读"><span>脏读</span></a></h3><blockquote><p>一个事务读取另一个事务中未被提交的修改，即为脏读。</p></blockquote><p>解决方案：保证事务在提交前的修改对其他事务不可见</p><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h3><blockquote><p>即其他事务进行两次相同的查询，可能会得到不一样的结果</p></blockquote><p>产生原因： #？ 解决方案： #？</p><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h3><blockquote><p>某个事务在读取一定范围的记录时，另一个事务又在该范围插入了新的记录，当之前的事务再次读取该范围内的记录时，就会产生幻行</p></blockquote><p>解决方案：</p><ul><li>InnoDB 和 XtraDb 存储引擎通过多版本并发控制MVCC解决了幻读的问题</li><li>事务#SERIALIZABLE (可串行化) 隔离级别通过强制事务串行执行来避免幻读问题。</li></ul><h2 id="各种隔离级别以及其可能产生的问题" tabindex="-1"><a class="header-anchor" href="#各种隔离级别以及其可能产生的问题"><span>各种隔离级别以及其可能产生的问题</span></a></h2><table><thead><tr><th></th><th>脏读可能性</th><th>不可重复读可能性</th><th>幻读可能性</th><th>加锁读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td><td>×</td></tr><tr><td>Repeatable read</td><td>×</td><td>×</td><td>√</td><td>×</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><h2 id="mysql设置隔离级别" tabindex="-1"><a class="header-anchor" href="#mysql设置隔离级别"><span>MySQL设置隔离级别</span></a></h2><p>设置当前会话的隔离级别：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TRANSACTION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ISOLATTION </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LEVEL</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> READ</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> COMMITTED</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="在事务中混合使用mysql存储引擎" tabindex="-1"><a class="header-anchor" href="#在事务中混合使用mysql存储引擎"><span>在事务中混合使用MySQL存储引擎</span></a></h2><p>MySQL服务层部管理事务，事务由下层的存储引擎实现。</p><p>在同一个事务使用多种存储引擎是不可靠的。 如果在事务中混合使用了事务型表和非事务型表(例如InnoDB表和MyISAM表在一个事务中混用)。正常提交不会造成什么问题，但是一旦失败需要回滚，那么非事务型表上的修改将不会撤销。</p><h2 id="开启-提交事务" tabindex="-1"><a class="header-anchor" href="#开启-提交事务"><span>开启/提交事务</span></a></h2><p>MySQL中使用 <code>START TRANSACTION</code> 命令来开启一个事务，使用 <code>COMMIT</code> 命令来提交事务。</p><blockquote><p>[!Tip] 开启事务后，在数据库中所做的所有更改都不会立即写入磁盘，而是被缓存到内存中。只有在事务提交时，这些更改才会被保存到磁盘上。(持久性)</p></blockquote><p>下面是一个简单的示例，演示如何开启并提交一个事务：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 开启事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">START TRANSACTION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 执行一系列SQL语句，对数据进行修改</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> my_table (col1, col2) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">VALUES</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> my_table </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> col3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">new_value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> col1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 提交事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>START TRANSACTION</code>命令开启了一个事务，并在之后执行了一系列对数据进行修改的SQL语句。最后使用<code>COMMIT</code>命令提交了事务，从而将所有的修改操作保存到了磁盘上。</p><p>如果需要取消事务所做的修改操作，可以使用<code>ROLLBACK</code>命令来回滚事务。例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 开启事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">START TRANSACTION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 执行一系列SQL语句，对数据进行修改</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> my_table (col1, col2) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">VALUES</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> my_table </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> col3 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">new_value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> col1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 回滚事务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ROLLBACK</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，使用ROLLBACK命令回滚了事务，从而取消了所有已经执行的修改操作。</p><h2 id="自动提交" tabindex="-1"><a class="header-anchor" href="#自动提交"><span>自动提交</span></a></h2><p>MySQL中默认使用自动提交模式。如果不显示开启一个事务，那么每个查询都被当作一个事务执行提交操作。 在当前连接中，可以通过设置 AUTOCOMMIIT 变量来关闭。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> AUTOCOMMIIT </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 1或者ON表示启动，0或者OFF表示禁用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="事务日志" tabindex="-1"><a class="header-anchor" href="#事务日志"><span>事务日志</span></a></h2><p>事务日志可以帮助提高事务的效率。 使用事务日志，存储引擎在修改表的数据时，只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。 事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。 事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志(Write-Ahead Logging)，修改数据需要写两次磁盘。</p><h2 id="事务中的锁" tabindex="-1"><a class="header-anchor" href="#事务中的锁"><span>事务中的锁</span></a></h2><p>锁</p><h3 id="vacuum" tabindex="-1"><a class="header-anchor" href="#vacuum"><span>VACUUM</span></a></h3>`,107)])])}const p=s(n,[["render",l]]),r=JSON.parse('{"path":"/article/anvoogyx/","title":"MVCC (多版本并发控制)","lang":"zh-CN","frontmatter":{"title":"MVCC (多版本并发控制)","date":"2025-08-29T00:00:00.000Z","category":"Database","createTime":"2025/08/29 22:37:12","permalink":"/article/anvoogyx/","description":"可以人为MVCC是行级锁的一个变种，但是他在很多情况下避免了加锁操作，因此开销更低。 虽然MVCC没有一个同一标准，大多实现机制不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。 分类 乐观并发控制 悲观并发控制 实现 基本实现 MVCC基本上是靠保存数据的在某个时间点的快照来实现的。 不管执行多长时间，每个事务看到数据都是一致的 根据事务开始...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVCC (多版本并发控制)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T10:02:10.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://zhenghaoyang.cn/blog/article/anvoogyx/"}],["meta",{"property":"og:site_name","content":"Maiiiiiid"}],["meta",{"property":"og:title","content":"MVCC (多版本并发控制)"}],["meta",{"property":"og:description","content":"可以人为MVCC是行级锁的一个变种，但是他在很多情况下避免了加锁操作，因此开销更低。 虽然MVCC没有一个同一标准，大多实现机制不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。 分类 乐观并发控制 悲观并发控制 实现 基本实现 MVCC基本上是靠保存数据的在某个时间点的快照来实现的。 不管执行多长时间，每个事务看到数据都是一致的 根据事务开始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T10:02:10.000Z"}],["meta",{"property":"article:published_time","content":"2025-08-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T10:02:10.000Z"}]]},"readingTime":{"minutes":10.43,"words":3130},"git":{"createdTime":1756485309000,"updatedTime":1756720930000,"contributors":[{"name":"Maid","username":"Maid","email":"zhp92@outlook.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Maid?v=4","url":"https://github.com/Maid"}]},"autoDesc":true,"filePathRelative":"posts/database-mvcc.md","headers":[],"categoryList":[{"id":"18958e","sort":10000,"name":"posts"}]}');export{p as comp,r as data};
